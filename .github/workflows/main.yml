name: Terraform EC2 Workflow

on:
  workflow_dispatch:
    inputs:
      ami_value:
        description: 'Enter the AMI ID'
        required: true
        default: 'ami-08eb150f611ca277f'  # Default AMI ID (you can replace this with any default value)
      instance_type:
        description: 'Enter the EC2 instance type'
        required: true
        default: 't3.micro'  # Default EC2 instance type (replace as needed)
        
jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code of your app repository
      - name: Checkout my-app-repo
        uses: actions/checkout@v2

      # Step 2: Checkout the terraform-module repository where your modules are stored
      - name: Checkout terraform-module repository
        uses: actions/checkout@v2
        with:
          repository: vikrantyadav1996/terraform-module  # Your terraform-module repo
          path: terraform-module  # This will check out your repo under the 'terraform-module' folder

      # Step 3: Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.3.7  # Specify the Terraform version

      # Step 4: Initialize Terraform (in the ec2 module directory)
      - name: Terraform Init
        working-directory: terraform-module/module/ec2  # Point to the ec2 folder
        run: terraform init

      # Step 5: Terraform Plan with input variables (ami_value and instance_type)
      - name: Terraform Plan
        working-directory: terraform-module/module/ec2
        run: terraform plan -var "ami_value=${{ github.event.inputs.ami_value }}" -var "instance_type=${{ github.event.inputs.instance_type }}"

      # Step 6: Terraform Apply with input variables
      - name: Terraform Apply
        working-directory: terraform-module/module/ec2
        run: terraform apply -auto-approve -var "ami_value=${{ github.event.inputs.ami_value }}" -var "instance_type=${{ github.event.inputs.instance_type }}"
